#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  in_file=""
  out_file=""
  color=""
  quiet=""
}

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "ffmpeg"
}

_ytencode() {
  local \
    _in="${1}" \
    _out="${2}" \
    _ffmpeg_opts=() \
    _loglevel="quiet"
    _ffmpeg_opts+=(
    -loglevel
      "${_loglevel}"
    )
  [[ "${quiet}" == "y" ]] && \
    _ffmpeg_opts+=(
      -y
    )
  [[ "${quiet}" != "y" ]] && \
    _ffmpeg_opts+=(
      -stats
    )
  _ffmpeg_opts+=(
    -vf
     "yadif,format=yuv420p"
   -force_key_frames
     "expr:gte(t,n_forced/2)"
   -c:v
     "libx264"
   -crf
     18
   -bf 2
   -c:a
     "aac"
   -q:a
     1
   -ac
     2
   -ar
     48000
   -use_editlist
     0
   -movflags
     +faststart
    -hide_banner
  )
  ffmpeg \
    -i \
      "${_in}" \
    ${_ffmpeg_opts[@]} \
    "${_out}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Convert media file for YouTube consumption

Usage:
  $(_get "app" "name")
    [options]
    <input_file>
    <output_file>
  options:
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 1 )) && \
  echo ciao && \
  _usage \
    1
_set \
  "in" \
  "file" \
  "${1}"
(( $# < 2 )) && \
  _set \
    "out" \
    "file" \
    "$( \
      pwd)/$( \
        basename \
          "$(_get \
              "in" \
              "file")").yt.mp4"
[[ "$(_get \
	"out" \
	"file")" == "" ]] && \
  _set \
    "out" \
    "file" \
    "${2}"
_set_overrides
_ytencode \
  "$( \
    _get \
      "in" \
      "file")" \
   "$( \
    _get \
      "out" \
      "file")"
