#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  in_file=""
  out_file=""
  vid_length=""
  color=""
  quiet=""
}

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "ffmpeg"
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Create blank video of given length;
# output file must have mpeg extension
# $1: input video files to infer size
# $2: output video file
# $3: length of resulting blank file
_blackvid() {
  local \
    _in="${1}" \
    _out="${2}" \
    _length="${3}" \
    _opts=()
  _opts+=(
    "${_ffmpeg_opts[@]}"
    -vf
      "trim=0:${_length},geq=0:128:128"
    -af
      "atrim=0:${_length},volume=0"
    -video_track_timescale
      600
  )
  ffmpeg \
    -i \
      "${_in}" \
    "${_opts[@]}" \
    "${_out}"
}

_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Generates a black mute video of given length from a input video

Usage:
  $(_get "app" "name")
    [options]
    <input_file>
    <output_file>
    <length>
  options:
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:cvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_encode_mode="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 3 )) && \
  _usage \
    1
_set \
  "in" \
  "file" \
  "${1}"
_set \
  "out" \
  "file" \
  "${2}"
_set \
  "vid" \
  "length" \
  "${3}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_blackvid \
  "$( \
    _get \
      "in" \
      "file")" \
  "$( \
    _get \
      "out" \
      "file")" \
  "$( \
    _get \
      "vid" \
      "length")"
