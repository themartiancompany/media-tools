#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'ffmpeg'
}

# shellcheck disable=SC2034
_global_variables() {
  out_stdout=""
  in_file=""
  fade_type=""
  fade_start=""
  fade_duration=""
  out_file=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Add a fade to audio file
# $1: input video file
# $2: fade start
# $3: fade duration
# $4: output video file
_addfade() {
  local \
    _type="${1}" \
    _in="${2}" \
    _start="${3}" \
    _seconds="${4}" \
    _out=(
      "${5}"
    ) \
    _opts=() \
    _ext
  _ext="${_in##*.}"
  _msg_info \
    "out: ${_out[*]}"
  if [[ "${_out[*]}" == "" ]] || \
     [[ "$(_get \
             "out" \
	     "stdout")" == "y" ]]; then
    _out+=(
      -
    )
  fi
  _opts+=(
    "${_ffmpeg_opts[@]}"
    -i 
      "${_in}"
    -c:a
      "${_ext}"
    -strict
      -2
    -af
      "afade=type=${_type}:start_time=${_start}:duration=${_seconds}"
  )
  ffmpeg \
    "${_opts[@]}" \
    "${_out[*]}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "fade" \
    "type" \
    "in"
  _set_override \
    "fade" \
    "start" \
    "0"
  _set_override \
    "out" \
    "file" \
    "$( \
      _get \
        "in" \
	"file").$( \
	   _get \
	     "fade" \
	     "duration").fade.m4a"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Add fade to audio file

Usage:
  $(_get "app" "name")
    [options]
    <in_file>
    <fade_start>
    <fade_duration>
    (<out_file>)
  options:
     -t                   Fade type.
                          Default: $(_get "fade" "type")
     -s                   Output to stdout.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:scvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_fade_type="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 3 )) && \
  _usage \
    1
(( $# < 3 )) && \
  _msg_info \
    "no output file given, will return to stdout"
    
in_file="${1}"
fade_start="${2}"
fade_duration="${3}"
(( $# == 4 )) && \
  out_file="${4}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_addfade \
  "${fade_type}" \
  "${in_file}" \
  "${fade_start}" \
  "${fade_duration}" \
  "${out_file}"
