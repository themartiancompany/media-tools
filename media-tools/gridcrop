#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'bc'
  _check_cmd \
    'crop'

}

# shellcheck disable=SC2034
_global_variables() {
  out_stdout=""
  in_file=""
  crop_mode=""
  grid_columns=""
  grid_rows=""
  out_prefix=""
  crops_selected=()
  crop_date=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

_uniform_split() {
  _width="${_resolution%%x*}"
  _height="${_resolution##*x}"
  _crop_width="$( \
   echo \
     "${_width} / ${_columns}" | \
     bc)"
  _crop_height="$( \
   echo \
     "${_height} / ${_rows}" | \
     bc)"
}

# Cut video by chunks amount
# or length
# $1: input media file
# $2: filename prefix for media file
# $3: split mode ('uniform' or 'fixed')
# $4: chunks amount if 'uniform' mode is selected
# $5: chunks length if 'fixed' mode is selected
# $@: only render these chunks
_gridcrop() {
  local \
    _in="${1}" \
    _mode="${2}" \
    _prefix="${3}" \
    _rows="${4}" \
    _columns="${5}" \
    _row \
    _column \
    _crops=() \
    _resolution \
    _crop_height \
    _crop_width \
    _out \
    _ext
  shift \
    5
  _crops=(
    "$@"
  )
  _ext="$( \
    _get_ext \
      "${_in}")"
  _resolution="$( \
    vidsize \
      "${_in}")"
  "_${_mode}_split"
  if [[ "${_crops[*]}" == "" ]]; then
    for _row \
      in $(seq \
             "${_rows}"); do
      for _column \
        in $(seq \
               "${_columns}"); do
        _crops+=(
	  "${_row}.${_column}"
        )  
      done
    done
  fi
  for _row \
    in $(seq \
           "${_rows}"); do
    for _column \
      in $(seq \
             "${_columns}"); do
      if [[ " ${_crops[*]} " == *" ${_row}.${_column} "* ]]; then
        _msg_info \
          "rendering sector ${_row}.${_column}"
        _box_x="$( \
          echo \
            "(${_column} - 1) * ${_crop_width}" | \
            bc)"
        _box_y="$( \
          echo \
            "(${_row} - 1) * ${_crop_height}" | \
            bc)"
        _out="${_prefix}.${_row}.${_column}.${_ext}"
        crop \
	  -v \
          "${_in}" \
          "${_out}" \
          "${_box_x}" \
          "${_box_y}" \
          "${_crop_width}" \
          "${_crop_height}"
      fi
    done
  done
}

# Set defaults and, if present, overrides
# from gridcrop command line option parameters
_set_overrides() {
  _set_override \
    "crop" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "out" \
    "prefix" \
    "$(_rm_ext \
         "$(_get \
	      "in" \
	      "file")")"
  _set_override \
    "crop" \
    "mode" \
    "uniform"
  _set_override \
    "grid" \
    "rows" \
    "2"
  _set_override \
    "grid" \
    "columns" \
    "1"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Crop date:   $(_get "crop" "date")"
  _msg_info "                Crop mode:   $(_get "crop" "mode")"
  _msg_info "                  In file:   ${in_file}"
  _msg_info "            Output prefix:   $(_get "out" "prefix")"
  _msg_info "                Grid rows:   $(_get "grid" "rows")"
  _msg_info "             Grid columns:   $(_get "grid" "columns")"
  _msg_info "           Selected crops:   ${crops_selected[*]}"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Crop media files into a grid

Usage:
  $(_get "app" "name")
    [options]
    <in_file>
    (<out_prefix>)
  modes:
     uniform              to split the media using an uniform grid
  options:
     -m                   crop mode;
                          Default: $(_get "crop" "mode")
     -p                   Grid rows
                          Default: $(_get "grid" "rows")
     -q                   Grid columns
                          Default: $(_get "grid" "columns")
     -r                   Returns only selected crops, 
                          written as 'row.column'.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:n:l:r:scvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_crop_mode="${OPTARG}" ;;
    p) override_grid_rows="${OPTARG}" ;;
    q) override_grid_columns="${OPTARG}" ;;
    r) crops_selected+=(
	"${OPTARG}"
       ) ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 1 )) && \
  _usage \
    1
(( $# < 2 )) && \
  _msg_info \
    "no prefix given for output files, same as the input filename will be used"
in_file="${1}"
(( $# == 2 )) && \
  out_prefix="${2}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_show_config
_gridcrop \
  "${in_file}" \
  "${crop_mode}" \
  "${out_prefix}" \
  "${grid_rows}" \
  "${grid_columns}" \
  "${crops_selected[@]}"
