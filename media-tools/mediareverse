#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'bc'
  _check_cmd \
    'ffmpeg'
}

# shellcheck disable=SC2034
_global_variables() {
  reverse_date=""
  in_file=""
  out_file=""
  video_only=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Reverse media file
# $1: input media file
# $2: ouput media file
# $3: video only
_mediareverse() {
  local \
    _in="${1}" \
    _out="${2}" \
    _video_only="${3}" \
    _ext \
    _duration \
    _opts=()
  shift \
    2
  _opts=(
    "$@"
  )
  _ext="$( \
    _get_ext \
      "${_in}")"
  _duration="$( \
    medialength \
      "${_in}")"
  if [[ "${_duration}" == "" ]]; then
    _msg_error \
      "Broken media file" \
      1
  fi
  _opts+=(
    "${_ffmpeg_opts[@]}"
    -i
      "${_in}"
    -vf
      reverse
  )
  if [[ "${_video_only}" == "n" ]]; then
    _opts+=(
      -a
        areverse
    )
  fi
  ffmpeg \
    "${_opts[@]}" \
    "${_out}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "reverse" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "out" \
    "file" \
    "$(_rm_ext \
         "$(_get \
	      "in" \
	      "file")")"
  _set_override \
    "video" \
    "only" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Reverse date:   $(_get "reverse" "date")"
  _msg_info "                 Out file:   $(_get "out" "file")"
  _msg_info "                  In file:   ${in_file}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Reverse media files

Usage:
  $(_get "app" "name")
    [options]
    <in_file>
    (<out_file>)
  options:
     -V                   Video only.
                          Default: $(_get "video" "only")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'Vcvh?' \
    arg; do
  case \
    "${arg}" in
    V) override_video_only="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 1 )) && \
  _usage \
    1
(( $# < 2 )) && \
  _msg_info \
    "no prefix given for output files, same as the input filename will be used"
in_file="${1}"
(( $# == 2 )) && \
  out_file="${2}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_show_config
_mediareverse \
  "${in_file}" \
  "${out_file}" \
  "${video_only}"
