#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  encode_mode=""
  input_video=""
  output_video=""
  color=""
  quiet=""
}

# Check all required programs
# are available
_requirements() {
  true
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

_vidscale() {
  local \
    _in="${1}" \
    _out="${2}" \
    _scale="${3}" \
    _mode="${4}" \
    _scale_opts=() \
    _opts=() \
    _crf \
    _preset
  if [[ "${_mode}" == 'quality' ]]; then
    _crf=18
    _preset="fast"
  fi
  if [[ "${_mode}" == 'size' ]]; then
    _crf=30
    _preset="slow"
  fi
  source \
    "${HOME}/.config/media-tools/ffmpeg_options"
  _scale_opts=(
    "scale=iw*${_scale}"
    "ih*${_scale}"
    "flags=neighbor"
  )
  _opts=(
    -i "${_in}"
    -vf "$(IFS=":"; \
           echo \
	     "${_scale_opts[*]}")"
    -c:v
      libx265
    -preset
      "${_preset}"
    -crf
      "${_crf}"
    "${_ffmpeg_opts[@]}"
  )
  _msg_info \
    "ffmpeg opts: ${_opts[*]}"
  ffmpeg \
    ${_opts[@]} \
    "${_out}"
}

# Set defaults
_set_overrides() {
  _set_override \
    "encode" \
    "mode" \
    "quality"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Scale up or down a video by a factor

Usage:
  $(_get "app" "name")
    [options]
    <input_video>
    <output_video>
    <scale>
  options:
     -m                   Encode mode, 'quality', 'size'.
                          (Default: $(_get "encode" "mode"))
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:cvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_encode_mode="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 3 )) && \
  _usage \
    1

_in="${1}"
_out="${2}"
_scale="${3}"

_set_overrides
_x265="true"
_ffmpeg_options_load
_config_user_init \
  "media-tools"
_vidscale \
  "${_in}" \
  "${_out}" \
  "${_scale}" \
  "$(_get \
       "encode" \
       "mode")"
