#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'ffmpeg'
}

# shellcheck disable=SC2034
_global_variables() {
  out_stdout=""
  in_file=""
  out_file=""
  sub_file=""
  sub_mode=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

_subsoft() {
  _opts+=(
    -i
      "${_sub}"
    -c
      copy
    -c:s
      mov_text
  )
}

_subhard() {
  _opts+=(
    -vf
      "subtitles='${_sub}'"
  )
}

# Remove sound track from video file
# $1: input video file
# $3: output video file
_subadd() {
  local \
    _mode="${1}" \
    _sub="${2}" \
    _in="${3}" \
    _out=(
      "${4}"
    ) \
    _opts=()
  _msg_info \
    "out: ${_out[*]}"
  if [[ "${_out[*]}" == "" ]] || \
     [[ "$(_get \
             "out" \
	     "stdout")" == "y" ]]; then
    _out+=(
      -
    )
  fi
  _opts+=(
    "${_ffmpeg_opts[@]}"
    -i 
      "${_in}"
  )
  "_sub${_mode}"
  ffmpeg \
    "${_opts[@]}" \
    "${_out[*]}"
}

_set_overrides() {
  _set_override \
    "sub" \
    "mode" \
    "hard"
  _set_override \
    "out" \
    "file" \
    "$( \
      _get \
        "in" \
	"file").sub.mp4"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Make date:   $(_get "make" "date")"
  _msg_info "           Subtitles mode:   $(_get "sub" "mode")"
  _msg_info "           Subtitles file:   $(_get "sub" "file")"
  _msg_info "              Output file:   $(_get "out" "file")"
  _msg_info "               Input file:   $(_get "in" "file")"
}



# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Remove sound track from video file

Usage:
  $(_get "app" "name")
    [options]
    <sub_file>
    <in_file>
    <out_file>
  options:
     -m <sub_mode>        Subtitles mode ('hard' or 'soft').
                          Default: $(_get "sub" "mode")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:scvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_sub_mode="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 3 )) && \
  _usage \
    1
_set \
  "sub" \
  "file" \
  "${1}"
_set \
  "in" \
  "file" \
  "${2}"
(( $# == 3 )) && \
  out_file="${3}"
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_set_overrides
_show_config
app_opts=(
  "${sub_mode}"
  "${sub_file}"
  "${in_file}"
  "${out_file}"
)
_subadd \
  "${app_opts[@]}"
