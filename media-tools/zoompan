#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "bc"
  _check_cmd \
    "ffmpeg"
  _check_cmd \
    "vidsize"
}

# shellcheck disable=SC2034
_global_variables() {
  op_date=""
  out_video=""
  in_video=""
  zoom_max=""
  zoom_duration=""
  box_x=""
  box_y=""
  out_resolution=""
  encoding_fps=""
  media_type=""
  out_stdout=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Zoom and pan a video file
# $1: output file
# $2: input file
# $3: maximum zoom
# $4: zoom duration
# $5: box upper left vertex x location in percentage
# $6: box upper left vertex y location in percentage
_zoompan() {
  local \
    _in="${1}" \
    _out=(
      "${2}"
    ) \
    _zoom_max="${3}" \
    _zoom_duration="${4}" \
    _box_x="${5}" \
    _box_y="${6}" \
    _quality="${7}" \
    _fps="${8}" \
    _type="${9}" \
    _opts=() \
    _vf=() \
    _ext \
    _duration \
    _speed \
    _size \
    _width \
    _width_new \
    _width_scale \
    _height \
    _height_new \
    _height_scale \
    _ratio_new \
    _zoom \
    _x \
    _y
  _opts+=(
    "${_ffmpeg_opts[@]}"
    #  -loop 1
  )
  if [[ "${_quality}" == "fhd" ]]; then
    _width_scale=1920
    _height_scale=1080
  elif [[ "${_quality}" == "hd" ]]; then
    _width_scale=1280
    _height_scale=720
  elif [[ "${_quality}" == "sd" ]]; then
    _width_scale=854
    _height_scale=480
  elif [[ "${_quality}" == "ld" ]]; then
    _width_scale=640
    _height_scale=360
  fi
  _size="$( \
    vidsize \
      "${_in}")"
  _width="$( \
    echo \
      "${_size}" | \
      cut \
	-d'x' \
	-f1)"
  _height="$( \
    echo \
      "${_size}" | \
      cut \
	-d'x' \
	-f2)"
  if (( \
    $( \
      bc \
        -l <<< \
        "$(echo \
             "scale=4;" \
             "${_width}/${_height}" ">=" \
	     "16/9")") )); then
    _ratio_new="$( \
      bc <<< \
        "scale=4; ${_height} / ${_height_scale}")"
    _width_new="$( \
      bc <<< \
        "${_width} / ${_ratio_new}")"
    _height_new="$( \
      bc <<< \
        "${_height} / ${_ratio_new}")"
  else
    _ratio_new="$( \
      bc <<< \
        "scale=4; ${_width} / ${_width_scale}")"
    _width_new="$( \
      bc <<< \
        "${_width} / ${_ratio_new}")"
    _height_new="$( \
      bc <<< \
        "${_height} / ${_ratio_new}")"
    if \
      (( "$(bc <<< \
             "${_height_new} % 2")" )); then
      _height_new="$( \
        bc <<< \
	  "${_height_new} - 1")"
    fi
  fi
  if [[ -z "${_box_x}" || \
	-z "${_box_y}" ]]; then
    _box_x="50"
    _box_y="50"
  else
    _box_x="$( \
      bc <<< \
        "100 * ${_box_x} / ${_width}")"
    _box_y="$( \
      bc <<< \
	"100 * ${_box_y} /${_height}")"
  fi
  if [[ "${_type}" == "video" ]]; then
    _duration="1"
    _speed="$( \
      bc <<< \
        "$(echo \
           "scale=4;" \
           "( ${_zoom_max} - 1) / ${_duration}")")"
    _zoom="pzoom+${_speed}"
    # _zoom="min(pzoom+${_speed},${_zoom_max})"
    _x="iw/2-iw/zoom/2"
    _y="ih/2-ih/zoom/2"
  elif [[ "${_type}" == "picture" ]]; then
    _duration="$( \
      bc <<< \
        "${_zoom_duration} * ${_fps}")"
    _speed="$( \
      bc <<< \
        "$(echo \
           "scale=4;" \
           "( ${_zoom_max} - 1) / ${_duration}")")"
    _zoom="min(zoom+${_speed},${_zoom_max})"
    _x="iw/2-iw*(1/2-${_box_x}/100)*on/${_duration}-iw/zoom/2"
    _y="ih/2-ih*(1/2-${_box_y}/100)*on/${_duration}-ih/zoom/2"
  fi
  _vf=(
    "z='${_zoom}'"
    "x='${_x}'"
    "y='${_y}'"
    "d=${_duration}"
    "fps=${_fps}"
    "s=${_width_new}x${_height_new}"
  )
  _opts+=(
    -i
      "${_in}"
    -vf
       "zoompan=$( \
	 IFS=":"; \
         printf \
	   "${_vf[*]}")"
    -c:v
      'libx264' 
    -y
  )
  if [[ "${_out[*]}" == "" ]] || \
     [[ "$(_get \
             "out" \
	     "stdout")" == "y" ]]; then
    _out+=(
      -
    )
  fi
  ffmpeg \
    "${_opts[@]}" \
    "${_out[*]}"
}

# Set defaults and, if present, overrides
# from zoompan command line option parameters
_set_overrides() {
  _set_override \
    "op" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "zoom" \
    "max" \
    "2.5"
  _set_override \
    "zoom" \
    "duration" \
    "5"
  _set_override \
    "box" \
    "x" \
    ""
  _set_override \
    "box" \
    "y" \
    ""
  _set_override \
    "out" \
    "resolution" \
    "sd"
  _set_override \
    "encoding" \
    "fps" \
    "30"
  _set_override \
    "media" \
    "type" \
    "video"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "op" "date")"
  _msg_info "              Input video:   $(_get "in" "video")"
  _msg_info "             Output video:   $(_get "out" "video")"
  _msg_info "                 Max zoom:   $(_get "zoom" "max")"
  _msg_info "            Zoom duration:   $(_get "zoom" "duration")"
  _msg_info "          Zoom x position:   $(_get "box" "x")"
  _msg_info "          Zoom y position:   $(_get "box" "y")"
  _msg_info "        Output resolution:   $(_get "out" "resolution")"
  _msg_info "             Encoding FPS:   $(_get "encoding" "fps")"
  _msg_info "               Media type:   $(_get "media" "type")"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Zoom and pan videos

Usage:
  $(_get "app" "name")
    [options]
    <input_video>
    <output_video>
    <zoom_max>
    <zoom_duration>
    <box_x>
    <box_y>
  Parameters:
     zoom_max             Max zoom
                          Default: $(_get "zoom" "max")
     zoom_duration        Zoom time duration
                          Default: $(_get "zoom" "duration")
     box_x                Box left upper vertex x position
                          as a percentage
                          Default: $(_get "box" "x")
     box_y                Box left upper vertex y position
                          as a percentage
                          Default: $(_get "box" "y")
 options:
     -r <resolution>      Output resolution (ld, sd, hd, fhd).
			  Default: $(_get "out" "resolution")
     -f <fps>             Encoding frames per second.
			  Default: $(_get "encoding" "fps")
     -t <type>             Media type.
			  Default: $(_get "media" "type")
     -s                   Output to stdout.
			  Default: $(_get "out" "stdout")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'r:f:svh?' \
    arg; do
  case \
    "${arg}" in
    r) override_out_resolution="${OPTARG}" ;;
    f) override_encoding_fps="${OPTARG}" ;;
    t) override_media_type="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 2 )) && \
  _set_overrides && \
  _usage \
    1
_set \
  "in" \
  "video" \
  "${1}"
_set \
  "out" \
  "video" \
  "${2}"
(( $# == 3 )) && \
  _set \
    "zoom" \
    "max" \
    "${3}"
(( $# == 4 )) && \
  _set \
    "zoom" \
    "duration" \
    "${4}"
(( $# == 5 )) && \
  _set \
    "box" \
    "x" \
    "${5}"
(( $# == 6 )) && \
  _set \
    "box" \
    "y" \
    "${6}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
opts=(
  "$(_get \
       "in" \
       "video")"
  "$(_get \
       "out" \
       "video")"
  "$(_get \
       "zoom" \
       "max")"
  "$(_get \
       "zoom" \
       "duration")"
  "$(_get \
       "box" \
       "x")"
  "$(_get \
       "box" \
       "y")"
  "$(_get \
       "out" \
       "resolution")"
  "$(_get \
       "encoding" \
       "fps")"
  "$(_get \
       "media" \
       "type")"
)
_show_config
_zoompan \
  "${opts[@]}"
