#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  in_files=()
  out_file=""
  encode_mode=""
  encode_date=""
  color=""
  quiet=""
}

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "ffmpeg"
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Con(cat)enate video files
# $1: output video file
# $@: input video files (sorted)
_vidcat() {
  local \
    _mode="${1}" \
    _out="${2}" \
    _i=1 \
    _in=() \
    _opts=() \
    _vf="" \
    _vid \
    _vids
  shift \
    2 
  _in=(
    "$@"
  )
  _vids="$( \
    mktemp)"
  for _vid \
    in "${_in[@]}"; do
    _vid="$( \
      realpath \
        "${_vid}")"
    echo \
      "file '${_vid}'" >> \
      "${_vids}"
   _vf="${_vf} [${_i}:v] [${_i}:a]"
   _i=$((_i + 1))
  done
  _vf="${_vf} concat=n=${_i}:v=1:a=1 [v] [a]"
  _msg_info \
    "vids: $( \
       cat \
         "${_vids}")"
  _opts=(
    -safe
      0
    -i
      ${_vids}
    -filter_complex
      "${_vf}"
    -map
      "[v]"
    -map
      "[a]"
    -f
      mp4
    -vcodec
      libx265
  )
  if [[ "${_mode}" == 'filter' ]]; then
    ffmpeg \
      "${_opts[@]}" \
      "${_out}" || \
      true
  elif [[ "${_mode}" == 'concat' ]]; then
    # echo \
    #   "${_mm}"
    # [[ ! $? -eq 0 ]] && \
      _msg_info \
        "running ffmpeg with concat method"
      _concat
  fi
}

_concat() {
  local \
    _opts=() \
    _in_vids=() \
    _vid
  _opts=(
    -y
    -safe
      0
    -f
      concat
    -c
      copy
  )
  for _vid in "${_in[@]}"; do
    _opts+=(
      -i "${_vid}"
    )
  done
  _msg_info \
    "running ffmpeg with ${_opts[@]}"
  ffmpeg \
    "${_opts[@]}" \
    "${_out}"
}

# Set defaults and, if present, overrides
# from command line option parameters
_set_overrides() {
  _set_override \
    "encode" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "encode" \
    "mode" \
    "concat"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "              Encode date:   $(_get "encode" "date")"
  _msg_info "              Encode mode:   $(_get "encode" "mode")"
  _msg_info "                 In files:   ${in_files[*]}"
  _msg_info "              Output file:   $(_get "out" "file")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Concatenate media files

Usage:
  $(_get "app" "name")
    [options]
    <output_file>
    [input_file]
  options:
     -m                   Video encode mode (concat, filter).
                          Default: $(_get "encode" "mode")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:cvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_encode_mode="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 2 )) && \
  _usage \
    1
_set \
  "out" \
  "file" \
  "${1}"
shift \
  1
in_files=(
  "$@"
)
_set_overrides
app_opts=(
  "$(_get \
       "encode" \
       "mode")"
  "$(_get \
       "out" \
       "file")"
  "${in_files[@]}"
)
_config_user_init \
  "media-tools"
_show_config
_vidcat \
  "${app_opts[@]}"
