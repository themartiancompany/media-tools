#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "ffmpeg"
}

# shellcheck disable=SC2034
_global_variables() {
  in_video=""
  out_video=""
  rotation_degrees=""
  rotate_method=""
  video_encode=""
  out_stdout=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Rotates a video
# $1: input file
# $2: output file
# $@: degrees
_vidrotate() {
  local \
    _in="${1}" \
    _out=(
      "${2}"
    ) \
    _degrees="${3}" \
    _opts=() \
    _ffmpeg_version
  _opts+=(
    "${_ffmpeg_opts[@]}"
  )
  [[ "$(_get \
	  "rotate" \
	  "method")" == 'metadata' ]] && \
    _ffmpeg_version="$( \
      ffmpeg \
        -version | \
        head \
	  -n \
	    1 | \
	  awk \
	    '{print $3}')" && \
    if (( ${_ffmpeg_version%%.*} < 6 )); then
      _opts+=(
        -i
          "${_in}"
        -c
          copy
        -map_metadata 0
        -metadata:s:v
          "rotate=${_degrees}"
      )
    else
      _opts+=(
        -display_rotation
	  ${_degrees} 
        -i
          "${_in}"
        -c
          copy
      )
    fi
  if [[ "$(_get \
	  "rotate" \
	  "method")" == 'filter' ]]; then
    _opts+=(
      -i
        "${_in}"
      -vf
        "transpose=1"
    )
    if [[ "$(_get \
               "video" \
               "encode")" == "y" ]]; then
      _x265="true"
      _opts+=(
        -c:v libx265
        -pix_fmt yuv420p
      )
    fi
  fi
  if [[ "${_out[*]}" == "" ]] || \
     [[ "$(_get \
             "out" \
	     "stdout")" == "y" ]]; then
    _out+=(
      -
    )
  fi
  ffmpeg \
    "${_opts[@]}" \
    "${_out[*]}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "rotate" \
    "method" \
    "metadata"
  _set_override \
    "video" \
    "encode" \
    "n"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Cut media files

Usage:
  $(_get "app" "name")
    [options]
    <input_video>
    <output_audio>
    <degrees>
  options:
     -r                   Rotation method (metadata, video filter)
			  Default: $(_get "rotate" "method")
     -e                   Whether to encode the resulting video
                          or use encoder from input media.
			  Default: $(_get "video" "encode")
     -s                   Output to stdout.
			  Default: $(_get "out" "stdout")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'r:scevh?' \
    arg; do
  case \
    "${arg}" in
    r) override_rotate_method="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    e) override_video_encode="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# <= 2 )) && \
  _usage \
    1
_set \
  "in" \
  "video" \
  "${1}"
_set \
  "out" \
  "video" \
  "${2}"
_set \
  "rotation" \
  "degrees" \
  "${3}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_vidrotate \
  "$(_get \
       "in" \
       "video")" \
  "$(_get \
       "out" \
       "video")" \
  "$(_get \
       "rotation" \
       "degrees")"
