#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  input_directory=""
  color=""
  quiet=""
}

_ytbulkencode() {
  local \
    _dir="${1}" \
    _queue=() \
    _file \
    _filename \
    _sum \
    _ytencode
  _ytencode="$( \
    command \
      -v \
      "ytencode")"
  [[ "${_ytencode}" == "" ]] && \
    _ytencode="${HOME}/media-tools/media-tools/ytencode"
  [[ "${_ytencode}" == "" ]] && \
    _msg_error \
      "missing ytencode" \
        1
  _queue=(
    $(find \
        "${_dir}" | \
	grep \
	  ".mp4")
  )
  for _file \
    in "${_queue[@]}"; do
    _msg_info \
      "encoding ${_file}"
    [ -e "yte.completed.log" ] && \
      _sum="$( \
        sha256sum \
          "${_file}" | \
          awk \
	    '{print $2}')" && \
      cat \
        "yte.completed.log" | \
        grep \
          -q \
          "${_sum}" && \
          break
    _filename="$( \
      basename \
        "${_file}")"
    _msg_info \
     "ytencode: ${_ytencode}"
    bash \
      "${_ytencode}" \
        -v \
        "${_file}" \
        "${_dir}/${_filename}.yt.mp4"
    [[ $? -eq 0 ]] && \
      echo \
        "${_sum} ${_file}" >> \
        "yte.completed.log"
  done
}

# Set defaults
_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Use as systemctl

Usage:
  $(_get "app" "name")
    <directory>
  options:
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 1 )) && \
  _usage \
    1
_dir="$( \
  realpath \
    "${1}")"
_msg_info \
  "encoding ${_dir}"
_ytbulkencode \
  "${_dir}"
