#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "ffmpeg"
}

# shellcheck disable=SC2034
_global_variables() {
  out_video=""
  in_audio=""
  in_videos=()
  video_encode=""
  audio_mode=""
  out_stdout=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Merges sound with a sequence of vids
# $1: output file
# $2: sound file
# $@: videos
_audiovid2vid() {
  local \
    _mode="${1}" \
    _out=(
      "${2}"
    ) \
    _aud="${3}" \
    _vids=() \
    _opts=() \
    _overlap \
    _vidaud \
    _mute
  shift \
    3
  _vids=(
    "$@"
  )
  _opts+=(
    "${_ffmpeg_opts[@]}"
    #  -loop 1
  )
  if [[ "${_mode}" == 'replace' ]]; then
    _opts+=(
      -i "${_aud}"
      -i "${_vids[@]}"
    )
  elif [[ "${_mode}" == "overlap" ]]; then
    _vidaud="$( \
      mktemp).opus"
    _overlap="$( \
      mktemp).opus"
    _mute="$( \
      mktemp)"
    ffmpeg \
      -i \
        "${_vids}" \
      "${_vidaud}"
    audioverlap \
      "${_overlap}" \
      "${_aud}" \
      "${_vidaud}"
     vidmute \
       "${_vids}" \
       "${_mute}"
     _opts+=(
       -i "${_overlap}"
       -i "${_mute}"
     )
  fi
  [[ "$(_get \
	  "video" \
	  "encode")" == "y" ]] && \
    _x265="true" && \
    _opts+=(
      -c:v
        libx265
      -pix_fmt
        yuv420p
  )
  [[ "$(_get \
	  "video" \
	  "encode")" == "n" ]] && \
    _opts+=(
      -c:v
        copy
  )
  _opts+=(
    -c:a
      aac
    -b:a
      48k
    -shortest
  )
  if [[ "${_out[*]}" == "" ]] || \
     [[ "$(_get \
             "out" \
	     "stdout")" == "y" ]]; then
    _out+=(
      -
    )
  fi
  ffmpeg \
    "${_opts[@]}" \
    "${_out[*]}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "audio" \
    "mode" \
    "replace"
  _set_override \
    "video" \
    "encode" \
    "n"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Cut media files

Usage:
  $(_get "app" "name")
    [options]
    <output_video>
    <input_audio>
    [input_video]
  options:
     -m                   Audio mode (replace, overlap)
                          Default: $(_get "audio" "mode")
     -e                   Whether to encode the resulting video
                          or use encoder from input media.
			  Default: $(_get "video" "encode")
     -s                   Output to stdout.
			  Default: $(_get "out" "stdout")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:scevh?' \
    arg; do
  case \
    "${arg}" in
    m) override_audio_mode="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    e) override_video_encode="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 3 )) && \
  _set_overrides && \
  _usage \
    1
_set \
  "out" \
  "video" \
  "${1}"
_set \
  "in" \
  "audio" \
  "${2}"
shift \
  2
in_videos=(
  "$@"
)
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_audiovid2vid \
  "$(_get \
       "audio" \
       "mode")" \
  "$(_get \
       "out" \
       "video")" \
  "$(_get \
       "in" \
       "audio")" \
  "${in_videos[@]}"
