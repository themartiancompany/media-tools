#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'mediareverse' \
    "media-tools"
  _check_cmd \
    'vidcat' \
    "media-tools"
}

# shellcheck disable=SC2034
_global_variables() {
  loop_date=""
  in_file=""
  loop_start=""
  loop_length=""
  loops_amount=""
  external_audio=""
  out_file=""
  color=""
  quiet=""
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Produces a continuous loop by clippitg a media file
# $1: input media file
# $2: loop start
# $2: loop length
# $3: loops amount
# $4: ouput media file
# $3: video only
_fluidreverseloop() {
  local \
    _in="${1}" \
    _loop_start="${2}" \
    _loop_length="${3}" \
    _loos_amount="${4}" \
    _external_audio="${5}" \
    _out="${6}" \
    _ext \
    _duration \
    _mktemp_opts=() \
    _mediaclip_opts=() \
    _mediareverse_opts=() \
    _vidcat_opts=() \
    _loop_opts=() \
    _mkmedia_opts=() \
    _opts=() \
    _clip \
    _reversed \
    _loop \
    _no_sound \
    _i
  shift \
    6
  _opts=(
    "$@"
  )
  _ext="$( \
    _get_ext \
      "${_in}")"
  _duration="$( \
    medialength \
      "${_in}")"
  if [[ "${_duration}" == "" ]]; then
    _msg_error \
      "Broken media file" \
      1
  fi
  _mktemp_opts+=(
    --suffix=".mp4"
    --dry-run
  )
  _clip="$( \
    mktemp \
      "${_mktemp_opts[@]}")"
  _reversed="$( \
    mktemp \
      "${_mktemp_opts[@]}")"
  _loop="$( \
    mktemp \
      "${_mktemp_opts[@]}")"
  _no_sound="$( \
    mktemp \
      "${_mktemp_opts[@]}")"
  if [[ "${quiet}" == "n" ]]; then
    _mediaclip_opts+=(
      -v
    )
    _mediareverse_opts+=(
      -v
    )
    _vidcat_opts+=(
      -v
    )
    _loop_opts+=(
      -v
    )
    _mkmedia_opts+=(
      -v
    )
  fi
  _mediaclip_opts+=(
    "${_in}"
    "${_loop_start}"
    "${_loop_length}"
    "${_clip}"
  )
  _mediareverse_opts+=(
    "${_clip}"
    "${_reversed}"
  )
   _vidcat_opts+=(
    "${_loop}"
    "${_clip}"
    "${_reversed}"
  )
  if [[ "${_external_audio}" != "" ]]; then
    _loop_opts+=(
      "${_no_sound}"
    )
    _mkmedia_opts+=(
      "${_out}"
      "${_external_audio}"
      "${_no_sound}"
    )
  else
    _loop_opts+=(
      "${_out}"
    )
  fi
  mediaclip \
    "${_mediaclip_opts[@]}"
  mediareverse \
    "${_mediareverse_opts[@]}"
  vidcat \
    "${_vidcat_opts[@]}"
  rm \
    -rf \
    "${_clip}" \
    "${_reversed}"
  if [[ "${loops_amount}" == "1" ]]; then
    if [[ "${_external_audio}" != "" ]]; then
      _target="${_no_sound}"
    else
      _target="${_out}"
    fi
    mv \
      "${_loop}" \
      "${_target}"
  else
    for _i in $(seq "${loops_amount}"); do
     _loop_opts+=(
       "${_loop}"
     )
    done
    vidcat \
      "${_loop_opts[@]}"
  fi
  if [[ "${_external_audio}" != "" ]]; then
    mkmedia \
      "${_mkmedia_opts[@]}"
  fi
  rm \
    -rf \
    "${_loop}" \
    "${_no_sound}" || \
    true
}

# Set defaults and, if present, overrides
# from command line option parameters
_set_overrides() {
  _set_override \
    "loop" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "external" \
    "audio" \
    ""
  _set_override \
    "loop" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "loop" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "loop" \
    "date" \
    "$(_get_date_human)"

  _set_override \
    "out" \
    "file" \
    "$(_rm_ext \
         "$(_get \
	      "in" \
	      "file")")"
  _set_override \
    "loops" \
    "amount" \
    "1"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Loop date:   $(_get "loop" "date")"
  _msg_info "               Loop start:   $(_get "loop" "start")"
  _msg_info "              Loop length:   $(_get "loop" "length")"
  _msg_info "             Loops amount:   $(_get "loops" "amount")"
  _msg_info "           External audio:   $(_get "external" "audio")"
  _msg_info "                 Out file:   $(_get "out" "file")"
  _msg_info "                  In file:   ${in_file}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Produces a continous reverse loop from a media file clip

Usage:
  $(_get "app" "name")
    [options]
    <in_file>
    <loop_start>
    <loop_length>
    <out_file>
  options:
     -a <external_audio>  Uses audio from an external file
                          Default: '$(_get "external" "audio")'
     -n <loops_amount>    Amount of loops
                          Default: '$(_get "loops" "amount")'
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'a:n:cvh?' \
    arg; do
  case \
    "${arg}" in
    a) override_external_audio="${OPTARG}" ;;
    n) override_loops_amount="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _set_overrides && \
  _usage \
    1
in_file="${1}"
(( 1 < $# )) && \
  loop_start="${2}"
(( 2 < $# )) && \
  loop_length="${3}"
(( 3 < $# )) && \
  out_file="${4}"
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_show_config
app_opts+=(
  "${in_file}"
  "${loop_start}"
  "${loop_length}"
  "${loops_amount}"
  "${external_audio}"
  "${out_file}"
)
_fluidreverseloop \
  "${app_opts[@]}"
