#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  out_file=""
  in_file=""
  scale_factor=""
  scale_date=""
  color=""
  quiet=""
}

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "ffmpeg"
  _check_cmd \
    "bc"
}

_ffmpeg_options_load() {
  local \
    ffmpeg_options
  ffmpeg_options="${HOME}/.config/media-tools/ffmpeg_options"
  [ -e "${ffmpeg_options}" ] && \
    source \
      "${ffmpeg_options}" || \
  true
}

# Scale audio file duration
# $1: output video file
# $2: scale
# $@: input video files (sorted)
_audioscale() {
  local \
    _out="${1}" \
    _in="${2}" \
    _scale="${3}" \
    _i \
    _opts=() \
    _af="" \
    _map \
    _iter=1 \
    _tmp_dir \
    _aud
  _tmp_dir="$( \
    mktemp \
      -d)"
  _length="$( \
    medialength \
      "${_in[@]}")"
  if [[ "${_length}" == "" ]]; then
    _msg_error \
      "input file '${_in[@]}' seems corrupted."
  fi
  if [ $(echo \
	   "${_scale} < 1" | \
	   bc \
	     -l) -eq 1 ]; then
    if [ $(echo \
	     "${_scale} < 0.5" | \
	     bc \
	       -l) -eq 1 ]; then
      _iter="$( \
        echo \
	  "scale=0; 0.5 / ${_scale}" | \
	  bc)"
      _scale=0.5
    _msg=(
      "ffmpeg can at most double length of a file,"
      "applying the filter '${_iter}' times"
    )
    _msg_info \
      "${_msg[*]}"
    fi
  fi
  _opts+=()
  _af="[0:a]atempo=${_scale}[a]" 
  _map="[a]"
  _opts=(
    "${_ffmpeg_opts[@]}"
    -i
      "${_in}"
    -filter_complex
      "${_af}"
    -map
      "${_map}"
  )
  for _i \
    in $(seq \
           "${_iter}"); do
    _aud="${_tmp_dir}/aud${_i}.opus"
    ffmpeg \
      "${_opts[@]}" \
      "${_aud}"
  done
  mv \
    "${_aud}" \
    "${_out}"
  return \
    0
}

# Set defaults and, if present, overrides
# from command line option parameters
_set_overrides() {
  _set_override \
    "scale" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "scale" \
    "factor" \
    "protocol"
  _set_override \
    "out" \
    "file" \
    "$(_get \
         "in" \
	 "file").scaled.m4a"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Scale date:   $(_get "scale" "date")"
  _msg_info "             Scale factor:   $(_get "scale" "factor")"
  _msg_info "              Input file:    $(_get "in" "file")"
  _msg_info "              Output file:   $(_get "out" "file")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Scale audio duration

Usage:

  $(_get "app" "name")
    [options]
    <output_file>
    <input_file>
    <scale_factor>

  options:
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 3 )) && \
  _usage \
    1
_set \
  "out" \
  "file" \
  "${1}"
_set \
  "in" \
  "file" \
  "${2}"
_set \
  "scale" \
  "factor" \
  "${3}"
_set_overrides
app_opts=(
  "$(_get \
       "out" \
       "file")"
  "$(_get \
       "in" \
       "file")"
  "$(_get \
       "scale" \
       "factor")"
)
_config_user_init \
  "media-tools"
_show_config
_ffmpeg_options_load
_audioscale \
  "${app_opts[@]}"
